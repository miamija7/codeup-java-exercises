
*** JAVA III - SESSIONS & COOKIES ***


What are Cookies and Sessions?
- Cookies are a way for web applications to track state
- a cookie is a name / value pair stored in a browser
- Sessions are the server-side complement to cookies
- often times the cookie just serves as an identifier for session data on the server
- think of a cookies and sessions as key-value pairs (cookie:session)


Session Tracking with Java:
- servlet libraries provide us a session object
- Java servlets automatically use cookies to track and store a session ID in each browser
- by default, this session will be destroyed when the browser is closed
- you can create and send your own cookies
- you can access user-specific data stored in memory, a file, or a database


Working With Sessions:
- servlet libraries: HttpSession
- access to session object through request.getSession() method
- we can define and retrieve attributes on the session with the setAttribute and getAttribute methods

    request.getSession()	                    Obtain the current session object
    session.getAttribute("attributeName")	    Retrieve a value from the session
    session.setAttribute("name", value)	        Set a value in the session
    session.removeAttribute("name")	            Remove an attribute from the session
    session.invalidate()	                    Destroy and regenerate the entire session

NOTE: Requests vs Sessions
Both the request object and the session object have getAttribute and setAttribute methods, and you will
be using both. It is important not to confuse the two. In general, the request object (and any attributes
you set on it) is only available for one HTTP request, but the session object persists for much longer
(until the user closes the browser or the server is restarted).



Restricting Public Access to JSPs:
- restrict access to different parts of our application
- store information in our sessions
- flaw: users could just visit /*.jsp pages directly
    + issue 1: when visiting the JSP file directly, no servlet methods are invoked
    + issue 2: there is no access control on who is able to see what pages
- solution: create a directory named WEB-INF inside webapp
    + putting our JSP files inside the WEB-INF directory only allows access them through a servlet
    + update your getRequestDispatcher calls to include /WEB-INF/

    // store information about whether the user is an admin in the session inside of LoginServlet.java
    protected void doPost(HttpServletRequest request, HttpServletResponse repsonse) {
        // figure out if the login attempt was good...
        // ...
        if (isAdmin) {
            request.getSession().setAttribute("isAdmin", true);
        }
        // ...
    }

    // flawed: Inside of ShowAdminDashboardServlet.java:
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        // redirect if the user is not an admin
        // cast to a boolean data type to properly compare
        if ((boolean)request.getSession().getAttribute("isAdmin") == false) {
            response.sendRedirect("/login");
            return;
        }
        request.getRequestDispatcher("/secret-admin-page.jsp").forward(request, response);
    }

    // fix: put our JSP files inside the WEB-INF directory inside webapp and .jsp files will not be accessible outside our application
    src/main/
        java/
            LoginServlet.java
            ShowAdminDashboardServlet.java
        webapp/
            css/
                style.css
            WEB-INF/
                index.jsp
                login.jsp
                secret-admin-page.jsp

    // update getRequestDispatcher calls in Servlets
    request.getRequestDispatcher("/WEB-INF/secret-admin-page.jsp").forward(request, response);