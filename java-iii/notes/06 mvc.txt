
*** JAVA III - MVC ***


================= Introduction to MVC =================

MVC:
- Model-View-Controller
- a design pattern for web applications
- using servlets and JSPs together, Beans, DAOs, and Factories


QUESTION: How should we design software applications?


ANSWER: loose coupling
- a good software design goal is loose coupling of the components of our application
- classes should depend on each other to the least extent that is practical
- achieves "separation of concerns"
    + some examples of separating concerns are:
        - Separating logic that manipulates data from the presentation of that data
        - A change in a class that connects to the database shouldn't necessitate a change in a JSP
        - Code that handles user authentication shouldn't deal with the font color on the login page
    + separating concerns allows our code to be more reusable, maintainable, and testable.


What Is MVC?
- Model-View-Controller
- a pattern for designing applications that prescribes a certain way of separating concerns
- originally a pattern for designing user interfaces
- become a popular paradigm in the web development world
- MVC says that we should separate our applications into three distinct parts
    1. Models           the representation of data in our application (Java beans)
    2. Views            the piece of the application that handle the presentation to the user (JSP files)
    3. Controllers      where the logic happens, and where we respond to user actions (Servlets)

    	                Model	    View	        Controller
    Responsible for	    Data	    Presentation	Logic
    In our project	    Beans	    JSPs	        Servlets

    ** See mvc.pgn **


================= Using Servlets with JSPs =================


Decouple our logic from our presentation:
- we should more clearly define the role of our servlets and JSPs
- we have written HTML inside of our servlets, and done logic inside of our JSPs, mixing logic and presentation
- our servlets should only handle logic (no HTML inside of strings inside of servlets)
- our JSPs should just deal with presentation (no arbitrary java inside of <% %>)
- pass data from our servlet to a JSP file through two primary methods on the request object:
    1. setAttribute                 pass the value of the name variable to the view
    2. getRequestDispatcher         send the request forward to the hello.jsp file

    // EXAMPLE
    // Controller: HelloServlet.java
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        String name = request.getParameter("name");
        if (name == null) {
            name = "World!";
        } else if (name.equals("bgates")) {
            response.sendRedirect("https://microsoft.com");
            return;
        }
        request.setAttribute("name", name);
        request.getRequestDispatcher("/hello.jsp").forward(request, response);
    }
    // View: hello.jsp
    <h1>Hello there, ${name}!</h1>


setAttribute:
- make a value available in the JSP
- defines the variable name in the JSP (1st arg)
- defines the value for that variable (2nd arg)


getRequestDispatcher:
- pass the flow of control from our servlet to a JSP
- should be given the path to the JSP file relative to the webapp directory
- usually the last line in a doGet or doPost method
- any logic or attribute setting is performed before this method is called