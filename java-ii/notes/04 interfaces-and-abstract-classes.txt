
*** JAVA II - Interfaces and Abstract Classes ***

Abstract Classes:
- An abstract class is a class that can serve as a superclass, but cannot be directly instantiated.
- uses the abstract keyword in the class definition
- Abstract classes can define abstract methods:
    + methods with no body
    + only provide information about the method
    + i.e. name, return type, and parameters
- classes that inherit from an abstract class must define all abstract methods, or itself be abstract
- to instantiate a class, it cannot be abstract + cannot have abstract methods
- use an abstract class to force subclasses to provide a unique implementation for a method

    abstract class Employee {
        public abstract String work();
    }
    class Accountant extends Employee {
        public String work() {
            return "crunching numbers";
        }
    }



Working With Abstract Classes:
- an abstract class is used to represent something that needs to be extended
- define the Employee class as abstract, and define an abstract method to force subclasses to provide an implementation
- subclass instances have full access to the constructor and methods of superclass
- inheriting from abstract classes, ensures each subclass has a unique implementation of abstract methods
- prevents duplicating code that deals with handling subclass', superclass variables and methods



Interfaces:
- an interface is a special case of an abstract class
- interface is an abstract class that follows these rules:
    Rule: all methods are public and abstract
    Rule: all properties are public static and final
    Rule: no static methods
- interfaces are used to define the behaviour of our objects
- typically only used to define methods
- occasionally class constants (public static properties)
- allow us to define the way that our objects interact with the rest of our app

    public interface WritesCode {
        Bug[] writeCode(int numberOfLines);
        boolean debug(Bug bug);
        void drinkCoffee();

        // could return null!
        StackOverflowLink searchForAnswer(Bug bug);

        BrokenKeyboard smashKeyboard(Keyboard k);
    }

    // name: what the object does (or is capable of)
    // methods: what the object is doing, now how

- implemented by classes with the implements keyword
- a class that implements an interface must provide an implementation for each method defined by the interface to compile

    class Developer implements WritesCode {
        /* implementations go here */
    }




Working With Interfaces:
- less tightly coupled: we define the implementation of the code independent of where it is used
- allows us to easily swap out implementations for an interface as the business requirements of our application change

    // INTERFACE
    interface Formatter {
        String display(User user);
    }

    // IMPLEMENTATION
    class ConsoleFormatter implements Formatter {
        public String display(User user) {
            return "--------------------" +
                "\n  name:  " + user.getName() +
                "\n  email: " + user.getEmail();
        }
    }

    // MAIN (all of our code is tied to the interface, not the implementation)
    Formatter fmt = new ConsoleFormatter();
    // ...
    fmt.display(loggedInUser);
    // ...
    for (User user : searchResults) {
        fmt.display(user);
    }

    // IMPLEMENTATION
    class HTMLFormatter implements Formatter {
        public String display(User user) {
            return String.format(
                "<div class=\"user\"><h2>%s(%s)</h2></div>",
                user.getName(), user.getEmail()
            );
        }
    }

- change the single line of code that references ConsoleFormatter to instead reference HTMLFormatter
- write our code to depend on the interface and not the implementation
- allows us to easily switch out the implementation, and for our code base to be better structured and more flexible




Interfaces vs Abstract Classes:
In summary...

Abstract Classes:
- Can use instance as well as static variables and constants.
- Can define regular methods that contain code and abstract methods that donâ€™t contain code.
- Can define static methods.
- Make use of the abstract and extends keywords.
- Contain
    + instance and static variables.
    + instance and static constants.
    + instance and static methods.

Interfaces:
- A class can directly implement multiple interfaces.
- Any object created from a class that implements an interface can be used wherever the interface is accepted.
- Can be used in place of classes to decouple parts of our code from implementation details.
- Make use of the implements and interface keywords.
- Contain
    + abstract methods.
    + static constants.

In Java, any class can both extend abstract classes and implement interfaces.

