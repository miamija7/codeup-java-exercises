*** JAVA I - Methods ***

Methods:
- methods are a sequence of statements that perform a specific task
- accept input, and produce output


Defining a Method:
- the most basic syntax for a method definition looks like this:

    public static returnType methodName([param1[, param2[, ...]]) {
        ...
    }

    public static String sayHello(String name) {
        return String.format("Hello, %s!", name);
    }

    + public -- this is the visibility modifier. This defines whether other classes can see this method.
    + static -- the presence of this keyword defines that the method belongs to the class, as opposed to instance of it
    + String -- this is the return type of the method
    + sayHello -- the name of the method
    + (String name) -- the parameter the method accepts
    + Everything inside the curly braces is the body of the method


Calling Methods:
- defined methods, need to be called or invoked
- parameters (inputs to the method) (define a method, define parameters)
- arguments (the actual values passed to the method) (call a method, call with arguments)
- data type of the arguments must be the same as the data type of the parameters

    startApplication();                             called with no arguments
    logInfo("User #214 registered!");               called with one argument
    addAttribute("loggedInUser", loggedInUser);     called with multiple arguments


Method Overloading:
- Method overloading is defining multiple methods with the same name, but with different parameter type,
  parameter order, or number of parameters
- Overloaded methods can call other versions of themselves

    // version 1
    public static void sayHello(int times) {
        for (int i = 0; i < times; i += 1) {
            sayHello();
        }
    }
    // version 2
    public static void sayHello() {
        sayHello("Hello", "World");
    }
    // version 3
    public static void sayHello(String name) {
        sayHello("Hello", name);
    }
    // version 4
    public static void sayHello(String greeting, String name) {
        System.out.println(greeting + ", " name "!");
    }

- the code that runs depends on the arguments we pass to it


Passing Parameters To Methods:
- in Java, parameters are passed by value
- this means that a copy of the value passed is created inside a method
- and that reassigning a value inside a method will not change it outside the method

    public static void changeString(String s) {
        s = "Wub a lub a dub dub";
    }

    public static void main(String[] args) {
        String changeMe = "hello codeup!";
        changeString(changeMe);
        System.out.println(changeMe);
    }

    --> hello codeup!

- changeString that takes in a String and re-assigns it
- the String variable inside changeString is re-assigned
- the changeMe variable will still have the same value after the method call


Recursion:
- One problem-solving technique in programming is called recursion
- aims to solve a problem by dividing it into smaller chunks
- the core idea is creating a method that calls itself with different parameters than what was originally passed
- must have:
    + a base case or stop condition

    public static void count(int n) {
        if (n <= 0) {
            System.out.println("All done!");
            return;
        }
        System.out.println(n);
        count(n - 1);
    }

    public static void main(String[] args) {
        count(5);
    }

- the method count is recursive because it calls itself
- it will continue to call itself with an argument of 1 less that the value that was originally passed
- there's a condition for stopping the recursion
- a STACK OVERFLOW error occurs when there's no stop