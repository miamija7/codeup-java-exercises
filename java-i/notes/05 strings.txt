*** JAVA I - Strings ***


Focus: how to work with and manipulate strings.


String Definition:
- a String is letters, numbers, and special characters strung together
- strings are objects, not primitives
- String variables are a reference type, not a primitive type
- the == operator with two objects checks if both sides are the same reference, if they refer to the same object


Immutability and Concatenation:
- strings are immutable
- once a string is created, it cannot be changed
- string concatenation (message + " World"), we aren't modifying the original string
- we are creating a new String object
- and updating the message variable to reference the new String object instead of the old one

    String message = "Hello";
    message = message + " World!";

NOTE: Concatenation
In Java, the + operator performs string concatenation when one of its operands is a String;
it will convert any other types to a String as well. Another way to do this is with the concat
method on any string object.


Comparing Strings:
- strings are not primitive data types but objects
- must objects, we must use methods to compare

    Scanner sc = new Scanner(System.in);
    System.out.print("Continue? [y/N] ")
    String userInput = sc.next();

    // Don't do this!
    boolean confirmation = userInput == "y";

------------ NOTE ----------------

String Literal Comparison:

- Because of how the JVM is implemented (which is well beyond the scope of this course),
  the following example will print "Strings are equal"

    // DON'T DO THIS
    if ("I am a string" == "I am a string") {
      System.out.println("Strings are equal");
    }

- But in general we cannot rely on that behavior, and should use either the equals or equalsIgnoreCase
  method on a string object to compare string values.

    // Do this instead!
    if ("I am a string".equals("I am a string")) {
      System.out.println("Strings are equal");
    }

----------------------------


String Comparison Methods:
    method	            description
    .equals	            determine, case-sensitively, if two strings have the same value.
    .equalsIgnoreCase	determine if two strings have the same value, disregarding their casing.
    .startsWith	        determine, case-sensitively, if one string starts with another.
    .endsWith	        determine, case-sensitively, if one string ends with another.


String Manipulation Methods:
    char charAt(int index);
    int indexOf(String subString);
    int lastIndexOf(String subString);
    int length();
    String replace(String pattern, String replacement);
    String substring(int beginIndex[, int endIndex]);
    String toLowerCase();
    String toUpperCase();
    String trim();

