
*** JAVA I - JAVA SYNTAX, DAYA TYPES, AND VARIABLES ***

Statements:
- Direct the operation of the program
- End with a semicolon ;
- Can be grouped as blocks inside curly braces {}
- Code inside of braces {} is indented
    {
        System.out.println("Code inside curly braces should be indented");
        System.out.println("with four spaces");
    }


Comments:
    // I am a single line comment

    /* I take up one line */

    /**
     * I take up
     * multiple
     * lines
     */


Javadoc:
- a very popular tool in the Java community that turns specially formatted comments into HTML documentation
- you will definitely come across it when reading Java code


Data Types:
- 8 Primitive Data Types:
Type	Bytes   Description
byte	  1	    Very short integers from -128 to 127
short	  2	    Short integers from -32,768 to 32,767
int	      4	    Integers from -2,147,483,648 to 2,147,483,647
long	  8	    Long integers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	  4	    Single-precision, floating-point numbers from -3.4E38 to 3.4E38 with up to 7 significant digits
double	  8	    Double-precision, floating-point numbers from -1.7E308 to 1.7E308 with up to 16 significant digits
char	  2	    A single Unicode character that’s stored in two bytes
boolean	  1	    A true or false value


Strings:
"C"     String
'C'     Char
\       Escape


Variables:
- Declarations:
    int id;
    boolean isLoggedIn;
    float bankAccountBalance;
- Initialization:
    id = 123;
    isLoggedIn = false;
    bankAccountBalance = 1000.23;
- Both declaration and initialization at the same time:
    int theAnswer = 42;
    String question = "What is your favorite color?";


Identifiers And Keywords:
- identifier is a valid name for a class, method, or variable
- an identifier must:
     + start with a letter, underscore, or dollar sign
     + consist of letters, dollar signs, underscores, and digits
     + be no more than 255 characters
-  an identifier can also not be a reserved word in Java


Reserved Words:
abstract, continue, for, new, switch, assert, default, goto, package,
synchronized, boolean, do, if, private, this, break, double, implements,
protected, throw, byte, else, import, public, throws, case, enum, instanceof,
return, transient, catch, extends, int, short, try, char, final, interface,static,
void, class, finally, long, strictfp, volatile, const, float, native, super, while.


Naming Conventions:
camelCase       variable and method names
PascalCase      class names
ALL_CAPS        constants



Constants:
- a notion of constants
- denoted by the final keyword
- values that cannot change while a program is running
    final int SIDES_OF_A_DICE = 6;
    final String API_KEY = "b75b703d8195f6f433ca";
    final String GITHUB_API_BASE_URL = "https://api.github.com";


Arithmetic Expressions:
- Binary vs. Unary
    + An arithmetic expression consists of operands and arithmetic operators.
    + Binary operators operate on two operands
    + Unary operators operate on one operand
- Order of Precedence
    1. Increment and decrement
    2. Positive and negative
    3. Multiplication, division, and modulus
    4. Addition and subtraction


Arithmetic and Assignment Operators:
- Binary Operator & Meaning
    +	Addition
    -	Subtraction
    *	Multiplication
    /	Division
    %	Modulus
    Examples:
    discount * price
    sum / total

- Unary Operator & Meaning
    ++	increment (pre and post)
    --	decrement (pre and post)
    +	Positive sign
    -	Negative sign
    Examples:
    ++numberOfLessonsCompleted
    numberOfDaysUntilDemoDay--

- Shorthand Arithmetic Assignment Operators
    +=
    -=
    Examples:
    myNumber += 9;


Casting:
- casting is coercing a value of one type into another
- two types:
    + implicit
        - going from a more specific to a less specific type
        - lower precision type to a higher precision type
        - widening conversion
        - implicitly: something that's done for you
        - Example:
            int myInteger = 900;
            long morePrecise = myInteger;
    + explicit
        - going from a less specific type to a more specific type
        - higher precision type to a lower precision type
        - explicitly: the manual approach to accomplishing the change, put the name of type we are casting
        - Example:
            double pi = 3.14159;
            int almostPi = (int) pi;


------------------- EXTRA: Literals -------------------

Integral Literals:
    Type            Example             Base                Digits      Prefix
    1. Decimal      int x = 108;        base ten            0-9         none
    2. Octal        int x = 0745;       base eight          0-7         prefix of 0
    3. Hexadecimal  int x = 0X123Fadd;  base of sixteen     0-9, A-F    prefix of 0X
    4. Binary       int x = 0b1011;     base of two         0-1         prefix of 0B


Literal Constant Types:
- specified variable types, but L and F specify literal constant types
- if they are convertible, they will be converted.
    L   long
    F   float


Floating-Point Literals:
- can be expressed using only decimal fractions or as exponential notation
- can indicate a positive or negative value (+/-)
- Examples:
    decimal Number = 89d;
    decimal Number = 3.14159e0;
    decimal Number = 1.0e-6D;


String Literals:
Name 	        Character   ASCII	Hex
Single quote	    \’	    39	    0x27
Double quotes	    \”	    34	    0x22
Carriage control	\r	    13	    0xd
Backlash 	        \\	    92	    0x5c
Newline 	        \n	    10	    0x0a
NUL character	    \0	    0	    0x00
Backspace	        \b	    8	    0x08
TAB	                \t	    9	    0x09


